import "./chunk-3EJPJMEH.js";

// node_modules/simple-dropzone/dist/simple-dropzone.module.js
var e = [0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29];
function t() {
  var e2 = this;
  function t2(e3, t3) {
    var n2 = 0;
    do {
      n2 |= 1 & e3, e3 >>>= 1, n2 <<= 1;
    } while (--t3 > 0);
    return n2 >>> 1;
  }
  e2.build_tree = function(n2) {
    var i2, r2, a2, o2 = e2.dyn_tree, s2 = e2.stat_desc.static_tree, l2 = e2.stat_desc.elems, f2 = -1;
    for (n2.heap_len = 0, n2.heap_max = 573, i2 = 0; i2 < l2; i2++)
      0 !== o2[2 * i2] ? (n2.heap[++n2.heap_len] = f2 = i2, n2.depth[i2] = 0) : o2[2 * i2 + 1] = 0;
    for (; n2.heap_len < 2; )
      o2[2 * (a2 = n2.heap[++n2.heap_len] = f2 < 2 ? ++f2 : 0)] = 1, n2.depth[a2] = 0, n2.opt_len--, s2 && (n2.static_len -= s2[2 * a2 + 1]);
    for (e2.max_code = f2, i2 = Math.floor(n2.heap_len / 2); i2 >= 1; i2--)
      n2.pqdownheap(o2, i2);
    a2 = l2;
    do {
      i2 = n2.heap[1], n2.heap[1] = n2.heap[n2.heap_len--], n2.pqdownheap(o2, 1), r2 = n2.heap[1], n2.heap[--n2.heap_max] = i2, n2.heap[--n2.heap_max] = r2, o2[2 * a2] = o2[2 * i2] + o2[2 * r2], n2.depth[a2] = Math.max(n2.depth[i2], n2.depth[r2]) + 1, o2[2 * i2 + 1] = o2[2 * r2 + 1] = a2, n2.heap[1] = a2++, n2.pqdownheap(o2, 1);
    } while (n2.heap_len >= 2);
    n2.heap[--n2.heap_max] = n2.heap[1], function(t3) {
      var n3, i3, r3, a3, o3, s3, l3 = e2.dyn_tree, f3 = e2.stat_desc.static_tree, u2 = e2.stat_desc.extra_bits, d2 = e2.stat_desc.extra_base, c2 = e2.stat_desc.max_length, _2 = 0;
      for (a3 = 0; a3 <= 15; a3++)
        t3.bl_count[a3] = 0;
      for (l3[2 * t3.heap[t3.heap_max] + 1] = 0, n3 = t3.heap_max + 1; n3 < 573; n3++)
        (a3 = l3[2 * l3[2 * (i3 = t3.heap[n3]) + 1] + 1] + 1) > c2 && (a3 = c2, _2++), l3[2 * i3 + 1] = a3, i3 > e2.max_code || (t3.bl_count[a3]++, o3 = 0, i3 >= d2 && (o3 = u2[i3 - d2]), t3.opt_len += (s3 = l3[2 * i3]) * (a3 + o3), f3 && (t3.static_len += s3 * (f3[2 * i3 + 1] + o3)));
      if (0 !== _2) {
        do {
          for (a3 = c2 - 1; 0 === t3.bl_count[a3]; )
            a3--;
          t3.bl_count[a3]--, t3.bl_count[a3 + 1] += 2, t3.bl_count[c2]--, _2 -= 2;
        } while (_2 > 0);
        for (a3 = c2; 0 !== a3; a3--)
          for (i3 = t3.bl_count[a3]; 0 !== i3; )
            (r3 = t3.heap[--n3]) > e2.max_code || (l3[2 * r3 + 1] != a3 && (t3.opt_len += (a3 - l3[2 * r3 + 1]) * l3[2 * r3], l3[2 * r3 + 1] = a3), i3--);
      }
    }(n2), function(e3, n3, i3) {
      var r3, a3, o3, s3 = [], l3 = 0;
      for (r3 = 1; r3 <= 15; r3++)
        s3[r3] = l3 = l3 + i3[r3 - 1] << 1;
      for (a3 = 0; a3 <= n3; a3++)
        0 !== (o3 = e3[2 * a3 + 1]) && (e3[2 * a3] = t2(s3[o3]++, o3));
    }(o2, e2.max_code, n2.bl_count);
  };
}
function n(e2, t2, n2, i2, r2) {
  var a2 = this;
  a2.static_tree = e2, a2.extra_bits = t2, a2.extra_base = n2, a2.elems = i2, a2.max_length = r2;
}
function i(e2, t2, n2, i2, r2) {
  var a2 = this;
  a2.good_length = e2, a2.max_lazy = t2, a2.nice_length = n2, a2.max_chain = i2, a2.func = r2;
}
t._length_code = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28], t.base_length = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0], t.base_dist = [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576], t.d_code = function(t2) {
  return t2 < 256 ? e[t2] : e[256 + (t2 >>> 7)];
}, t.extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], t.extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], t.extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], t.bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], n.static_ltree = [12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8, 130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42, 8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8, 22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8, 222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113, 8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8, 69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8, 173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9, 51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9, 427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379, 9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23, 9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9, 399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9, 223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7, 40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8, 99, 8, 227, 8], n.static_dtree = [0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5, 25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5], n.static_l_desc = new n(n.static_ltree, t.extra_lbits, 257, 286, 15), n.static_d_desc = new n(n.static_dtree, t.extra_dbits, 0, 30, 15), n.static_bl_desc = new n(null, t.extra_blbits, 0, 19, 7);
var r = [new i(0, 0, 0, 0, 0), new i(4, 4, 8, 4, 1), new i(4, 5, 16, 8, 1), new i(4, 6, 32, 32, 1), new i(4, 4, 16, 16, 2), new i(8, 16, 32, 32, 2), new i(8, 16, 128, 128, 2), new i(8, 32, 128, 256, 2), new i(32, 128, 258, 1024, 2), new i(32, 258, 258, 4096, 2)];
var a = ["need dictionary", "stream end", "", "", "stream error", "data error", "", "buffer error", "", ""];
function o(e2, t2, n2, i2) {
  var r2 = e2[2 * t2], a2 = e2[2 * n2];
  return r2 < a2 || r2 == a2 && i2[t2] <= i2[n2];
}
function s() {
  var e2, i2, s2, l2, f2, u2, d2, c2, _2, h2, p2, w2, v2, b2, x2, m2, g2, y2, k2, U2, z2, E2, D2, A2, S2, R2, F2, T2, W2, M2, B2, I2, C2, L2, P2, Z2, N2, j2, O2, V2, q2, $2 = this, G2 = new t(), H2 = new t(), Y2 = new t();
  function J2() {
    var e3;
    for (e3 = 0; e3 < 286; e3++)
      B2[2 * e3] = 0;
    for (e3 = 0; e3 < 30; e3++)
      I2[2 * e3] = 0;
    for (e3 = 0; e3 < 19; e3++)
      C2[2 * e3] = 0;
    B2[512] = 1, $2.opt_len = $2.static_len = 0, Z2 = j2 = 0;
  }
  function K2(e3, t2) {
    var n2, i3, r2 = -1, a2 = e3[1], o2 = 0, s3 = 7, l3 = 4;
    for (0 === a2 && (s3 = 138, l3 = 3), e3[2 * (t2 + 1) + 1] = 65535, n2 = 0; n2 <= t2; n2++)
      i3 = a2, a2 = e3[2 * (n2 + 1) + 1], ++o2 < s3 && i3 == a2 || (o2 < l3 ? C2[2 * i3] += o2 : 0 !== i3 ? (i3 != r2 && C2[2 * i3]++, C2[32]++) : o2 <= 10 ? C2[34]++ : C2[36]++, o2 = 0, r2 = i3, 0 === a2 ? (s3 = 138, l3 = 3) : i3 == a2 ? (s3 = 6, l3 = 3) : (s3 = 7, l3 = 4));
  }
  function Q2(e3) {
    $2.pending_buf[$2.pending++] = e3;
  }
  function X2(e3) {
    Q2(255 & e3), Q2(e3 >>> 8 & 255);
  }
  function ee2(e3, t2) {
    var n2, i3 = t2;
    q2 > 16 - i3 ? (X2(V2 |= (n2 = e3) << q2 & 65535), V2 = n2 >>> 16 - q2, q2 += i3 - 16) : (V2 |= e3 << q2 & 65535, q2 += i3);
  }
  function te2(e3, t2) {
    var n2 = 2 * e3;
    ee2(65535 & t2[n2], 65535 & t2[n2 + 1]);
  }
  function ne2(e3, t2) {
    var n2, i3, r2 = -1, a2 = e3[1], o2 = 0, s3 = 7, l3 = 4;
    for (0 === a2 && (s3 = 138, l3 = 3), n2 = 0; n2 <= t2; n2++)
      if (i3 = a2, a2 = e3[2 * (n2 + 1) + 1], !(++o2 < s3 && i3 == a2)) {
        if (o2 < l3)
          do {
            te2(i3, C2);
          } while (0 != --o2);
        else
          0 !== i3 ? (i3 != r2 && (te2(i3, C2), o2--), te2(16, C2), ee2(o2 - 3, 2)) : o2 <= 10 ? (te2(17, C2), ee2(o2 - 3, 3)) : (te2(18, C2), ee2(o2 - 11, 7));
        o2 = 0, r2 = i3, 0 === a2 ? (s3 = 138, l3 = 3) : i3 == a2 ? (s3 = 6, l3 = 3) : (s3 = 7, l3 = 4);
      }
  }
  function ie2() {
    16 == q2 ? (X2(V2), V2 = 0, q2 = 0) : q2 >= 8 && (Q2(255 & V2), V2 >>>= 8, q2 -= 8);
  }
  function re2(e3, n2) {
    var i3, r2, a2;
    if ($2.pending_buf[N2 + 2 * Z2] = e3 >>> 8 & 255, $2.pending_buf[N2 + 2 * Z2 + 1] = 255 & e3, $2.pending_buf[L2 + Z2] = 255 & n2, Z2++, 0 === e3 ? B2[2 * n2]++ : (j2++, e3--, B2[2 * (t._length_code[n2] + 256 + 1)]++, I2[2 * t.d_code(e3)]++), 0 == (8191 & Z2) && F2 > 2) {
      for (i3 = 8 * Z2, r2 = z2 - g2, a2 = 0; a2 < 30; a2++)
        i3 += I2[2 * a2] * (5 + t.extra_dbits[a2]);
      if (i3 >>>= 3, j2 < Math.floor(Z2 / 2) && i3 < Math.floor(r2 / 2))
        return true;
    }
    return Z2 == P2 - 1;
  }
  function ae2(e3, n2) {
    var i3, r2, a2, o2, s3 = 0;
    if (0 !== Z2)
      do {
        i3 = $2.pending_buf[N2 + 2 * s3] << 8 & 65280 | 255 & $2.pending_buf[N2 + 2 * s3 + 1], r2 = 255 & $2.pending_buf[L2 + s3], s3++, 0 === i3 ? te2(r2, e3) : (te2((a2 = t._length_code[r2]) + 256 + 1, e3), 0 !== (o2 = t.extra_lbits[a2]) && ee2(r2 -= t.base_length[a2], o2), i3--, te2(a2 = t.d_code(i3), n2), 0 !== (o2 = t.extra_dbits[a2]) && ee2(i3 -= t.base_dist[a2], o2));
      } while (s3 < Z2);
    te2(256, e3), O2 = e3[513];
  }
  function oe2() {
    q2 > 8 ? X2(V2) : q2 > 0 && Q2(255 & V2), V2 = 0, q2 = 0;
  }
  function se2(e3, t2, n2) {
    ee2(0 + (n2 ? 1 : 0), 3), function(e4, t3, n3) {
      oe2(), O2 = 8, X2(t3), X2(~t3), $2.pending_buf.set(c2.subarray(e4, e4 + t3), $2.pending), $2.pending += t3;
    }(e3, t2);
  }
  function le2(i3) {
    (function(e3, i4, r2) {
      var a2, o2, s3 = 0;
      F2 > 0 ? (G2.build_tree($2), H2.build_tree($2), s3 = function() {
        var e4;
        for (K2(B2, G2.max_code), K2(I2, H2.max_code), Y2.build_tree($2), e4 = 18; e4 >= 3 && 0 === C2[2 * t.bl_order[e4] + 1]; e4--)
          ;
        return $2.opt_len += 3 * (e4 + 1) + 5 + 5 + 4, e4;
      }(), (o2 = $2.static_len + 3 + 7 >>> 3) <= (a2 = $2.opt_len + 3 + 7 >>> 3) && (a2 = o2)) : a2 = o2 = i4 + 5, i4 + 4 <= a2 && -1 != e3 ? se2(e3, i4, r2) : o2 == a2 ? (ee2(2 + (r2 ? 1 : 0), 3), ae2(n.static_ltree, n.static_dtree)) : (ee2(4 + (r2 ? 1 : 0), 3), function(e4, n2, i5) {
        var r3;
        for (ee2(e4 - 257, 5), ee2(n2 - 1, 5), ee2(i5 - 4, 4), r3 = 0; r3 < i5; r3++)
          ee2(C2[2 * t.bl_order[r3] + 1], 3);
        ne2(B2, e4 - 1), ne2(I2, n2 - 1);
      }(G2.max_code + 1, H2.max_code + 1, s3 + 1), ae2(B2, I2)), J2(), r2 && oe2();
    })(g2 >= 0 ? g2 : -1, z2 - g2, i3), g2 = z2, e2.flush_pending();
  }
  function fe2() {
    var t2, n2, i3, r2;
    do {
      if (0 == (r2 = _2 - D2 - z2) && 0 === z2 && 0 === D2)
        r2 = f2;
      else if (-1 == r2)
        r2--;
      else if (z2 >= f2 + f2 - 262) {
        c2.set(c2.subarray(f2, f2 + f2), 0), E2 -= f2, z2 -= f2, g2 -= f2, i3 = t2 = v2;
        do {
          n2 = 65535 & p2[--i3], p2[i3] = n2 >= f2 ? n2 - f2 : 0;
        } while (0 != --t2);
        i3 = t2 = f2;
        do {
          n2 = 65535 & h2[--i3], h2[i3] = n2 >= f2 ? n2 - f2 : 0;
        } while (0 != --t2);
        r2 += f2;
      }
      if (0 === e2.avail_in)
        return;
      t2 = e2.read_buf(c2, z2 + D2, r2), (D2 += t2) >= 3 && (w2 = ((w2 = 255 & c2[z2]) << m2 ^ 255 & c2[z2 + 1]) & x2);
    } while (D2 < 262 && 0 !== e2.avail_in);
  }
  function ue2(e3) {
    var t2, n2, i3 = S2, r2 = z2, a2 = A2, o2 = z2 > f2 - 262 ? z2 - (f2 - 262) : 0, s3 = M2, l3 = d2, u3 = z2 + 258, _3 = c2[r2 + a2 - 1], p3 = c2[r2 + a2];
    A2 >= W2 && (i3 >>= 2), s3 > D2 && (s3 = D2);
    do {
      if (c2[(t2 = e3) + a2] == p3 && c2[t2 + a2 - 1] == _3 && c2[t2] == c2[r2] && c2[++t2] == c2[r2 + 1]) {
        r2 += 2, t2++;
        do {
        } while (c2[++r2] == c2[++t2] && c2[++r2] == c2[++t2] && c2[++r2] == c2[++t2] && c2[++r2] == c2[++t2] && c2[++r2] == c2[++t2] && c2[++r2] == c2[++t2] && c2[++r2] == c2[++t2] && c2[++r2] == c2[++t2] && r2 < u3);
        if (n2 = 258 - (u3 - r2), r2 = u3 - 258, n2 > a2) {
          if (E2 = e3, a2 = n2, n2 >= s3)
            break;
          _3 = c2[r2 + a2 - 1], p3 = c2[r2 + a2];
        }
      }
    } while ((e3 = 65535 & h2[e3 & l3]) > o2 && 0 != --i3);
    return a2 <= D2 ? a2 : D2;
  }
  $2.depth = [], $2.bl_count = [], $2.heap = [], B2 = [], I2 = [], C2 = [], $2.pqdownheap = function(e3, t2) {
    for (var n2 = $2.heap, i3 = n2[t2], r2 = t2 << 1; r2 <= $2.heap_len && (r2 < $2.heap_len && o(e3, n2[r2 + 1], n2[r2], $2.depth) && r2++, !o(e3, i3, n2[r2], $2.depth)); )
      n2[t2] = n2[r2], t2 = r2, r2 <<= 1;
    n2[t2] = i3;
  }, $2.deflateInit = function(e3, t2, a2, o2, k3, E3) {
    return o2 || (o2 = 8), k3 || (k3 = 8), E3 || (E3 = 0), e3.msg = null, -1 == t2 && (t2 = 6), k3 < 1 || k3 > 9 || 8 != o2 || a2 < 9 || a2 > 15 || t2 < 0 || t2 > 9 || E3 < 0 || E3 > 2 ? -2 : (e3.dstate = $2, d2 = (f2 = 1 << (u2 = a2)) - 1, x2 = (v2 = 1 << (b2 = k3 + 7)) - 1, m2 = Math.floor((b2 + 3 - 1) / 3), c2 = new Uint8Array(2 * f2), h2 = [], p2 = [], P2 = 1 << k3 + 6, $2.pending_buf = new Uint8Array(4 * P2), s2 = 4 * P2, N2 = Math.floor(P2 / 2), L2 = 3 * P2, F2 = t2, T2 = E3, function(e4) {
      return e4.total_in = e4.total_out = 0, e4.msg = null, $2.pending = 0, $2.pending_out = 0, i2 = 113, l2 = 0, G2.dyn_tree = B2, G2.stat_desc = n.static_l_desc, H2.dyn_tree = I2, H2.stat_desc = n.static_d_desc, Y2.dyn_tree = C2, Y2.stat_desc = n.static_bl_desc, V2 = 0, q2 = 0, O2 = 8, J2(), function() {
        var e5;
        for (_2 = 2 * f2, p2[v2 - 1] = 0, e5 = 0; e5 < v2 - 1; e5++)
          p2[e5] = 0;
        R2 = r[F2].max_lazy, W2 = r[F2].good_length, M2 = r[F2].nice_length, S2 = r[F2].max_chain, z2 = 0, g2 = 0, D2 = 0, y2 = A2 = 2, U2 = 0, w2 = 0;
      }(), 0;
    }(e3));
  }, $2.deflateEnd = function() {
    return 42 != i2 && 113 != i2 && 666 != i2 ? -2 : ($2.pending_buf = null, p2 = null, h2 = null, c2 = null, $2.dstate = null, 113 == i2 ? -3 : 0);
  }, $2.deflateParams = function(e3, t2, n2) {
    var i3 = 0;
    return -1 == t2 && (t2 = 6), t2 < 0 || t2 > 9 || n2 < 0 || n2 > 2 ? -2 : (r[F2].func != r[t2].func && 0 !== e3.total_in && (i3 = e3.deflate(1)), F2 != t2 && (R2 = r[F2 = t2].max_lazy, W2 = r[F2].good_length, M2 = r[F2].nice_length, S2 = r[F2].max_chain), T2 = n2, i3);
  }, $2.deflateSetDictionary = function(e3, t2, n2) {
    var r2, a2 = n2, o2 = 0;
    if (!t2 || 42 != i2)
      return -2;
    if (a2 < 3)
      return 0;
    for (a2 > f2 - 262 && (o2 = n2 - (a2 = f2 - 262)), c2.set(t2.subarray(o2, o2 + a2), 0), z2 = a2, g2 = a2, w2 = ((w2 = 255 & c2[0]) << m2 ^ 255 & c2[1]) & x2, r2 = 0; r2 <= a2 - 3; r2++)
      h2[r2 & d2] = p2[w2 = (w2 << m2 ^ 255 & c2[r2 + 2]) & x2], p2[w2] = r2;
    return 0;
  }, $2.deflate = function(t2, o2) {
    var _3, b3, S3, W3, M3, B3;
    if (o2 > 4 || o2 < 0)
      return -2;
    if (!t2.next_out || !t2.next_in && 0 !== t2.avail_in || 666 == i2 && 4 != o2)
      return t2.msg = a[4], -2;
    if (0 === t2.avail_out)
      return t2.msg = a[7], -5;
    if (e2 = t2, W3 = l2, l2 = o2, 42 == i2 && (b3 = 8 + (u2 - 8 << 4) << 8, (S3 = (F2 - 1 & 255) >> 1) > 3 && (S3 = 3), b3 |= S3 << 6, 0 !== z2 && (b3 |= 32), i2 = 113, Q2((B3 = b3 += 31 - b3 % 31) >> 8 & 255), Q2(255 & B3)), 0 !== $2.pending) {
      if (e2.flush_pending(), 0 === e2.avail_out)
        return l2 = -1, 0;
    } else if (0 === e2.avail_in && o2 <= W3 && 4 != o2)
      return e2.msg = a[7], -5;
    if (666 == i2 && 0 !== e2.avail_in)
      return t2.msg = a[7], -5;
    if (0 !== e2.avail_in || 0 !== D2 || 0 != o2 && 666 != i2) {
      switch (M3 = -1, r[F2].func) {
        case 0:
          M3 = function(t3) {
            var n2, i3 = 65535;
            for (i3 > s2 - 5 && (i3 = s2 - 5); ; ) {
              if (D2 <= 1) {
                if (fe2(), 0 === D2 && 0 == t3)
                  return 0;
                if (0 === D2)
                  break;
              }
              if (z2 += D2, D2 = 0, n2 = g2 + i3, (0 === z2 || z2 >= n2) && (D2 = z2 - n2, z2 = n2, le2(false), 0 === e2.avail_out))
                return 0;
              if (z2 - g2 >= f2 - 262 && (le2(false), 0 === e2.avail_out))
                return 0;
            }
            return le2(4 == t3), 0 === e2.avail_out ? 4 == t3 ? 2 : 0 : 4 == t3 ? 3 : 1;
          }(o2);
          break;
        case 1:
          M3 = function(t3) {
            for (var n2, i3 = 0; ; ) {
              if (D2 < 262) {
                if (fe2(), D2 < 262 && 0 == t3)
                  return 0;
                if (0 === D2)
                  break;
              }
              if (D2 >= 3 && (i3 = 65535 & p2[w2 = (w2 << m2 ^ 255 & c2[z2 + 2]) & x2], h2[z2 & d2] = p2[w2], p2[w2] = z2), 0 !== i3 && (z2 - i3 & 65535) <= f2 - 262 && 2 != T2 && (y2 = ue2(i3)), y2 >= 3)
                if (n2 = re2(z2 - E2, y2 - 3), D2 -= y2, y2 <= R2 && D2 >= 3) {
                  y2--;
                  do {
                    z2++, i3 = 65535 & p2[w2 = (w2 << m2 ^ 255 & c2[z2 + 2]) & x2], h2[z2 & d2] = p2[w2], p2[w2] = z2;
                  } while (0 != --y2);
                  z2++;
                } else
                  z2 += y2, y2 = 0, w2 = ((w2 = 255 & c2[z2]) << m2 ^ 255 & c2[z2 + 1]) & x2;
              else
                n2 = re2(0, 255 & c2[z2]), D2--, z2++;
              if (n2 && (le2(false), 0 === e2.avail_out))
                return 0;
            }
            return le2(4 == t3), 0 === e2.avail_out ? 4 == t3 ? 2 : 0 : 4 == t3 ? 3 : 1;
          }(o2);
          break;
        case 2:
          M3 = function(t3) {
            for (var n2, i3, r2 = 0; ; ) {
              if (D2 < 262) {
                if (fe2(), D2 < 262 && 0 == t3)
                  return 0;
                if (0 === D2)
                  break;
              }
              if (D2 >= 3 && (r2 = 65535 & p2[w2 = (w2 << m2 ^ 255 & c2[z2 + 2]) & x2], h2[z2 & d2] = p2[w2], p2[w2] = z2), A2 = y2, k2 = E2, y2 = 2, 0 !== r2 && A2 < R2 && (z2 - r2 & 65535) <= f2 - 262 && (2 != T2 && (y2 = ue2(r2)), y2 <= 5 && (1 == T2 || 3 == y2 && z2 - E2 > 4096) && (y2 = 2)), A2 >= 3 && y2 <= A2) {
                i3 = z2 + D2 - 3, n2 = re2(z2 - 1 - k2, A2 - 3), D2 -= A2 - 1, A2 -= 2;
                do {
                  ++z2 <= i3 && (r2 = 65535 & p2[w2 = (w2 << m2 ^ 255 & c2[z2 + 2]) & x2], h2[z2 & d2] = p2[w2], p2[w2] = z2);
                } while (0 != --A2);
                if (U2 = 0, y2 = 2, z2++, n2 && (le2(false), 0 === e2.avail_out))
                  return 0;
              } else if (0 !== U2) {
                if ((n2 = re2(0, 255 & c2[z2 - 1])) && le2(false), z2++, D2--, 0 === e2.avail_out)
                  return 0;
              } else
                U2 = 1, z2++, D2--;
            }
            return 0 !== U2 && (n2 = re2(0, 255 & c2[z2 - 1]), U2 = 0), le2(4 == t3), 0 === e2.avail_out ? 4 == t3 ? 2 : 0 : 4 == t3 ? 3 : 1;
          }(o2);
      }
      if (2 != M3 && 3 != M3 || (i2 = 666), 0 == M3 || 2 == M3)
        return 0 === e2.avail_out && (l2 = -1), 0;
      if (1 == M3) {
        if (1 == o2)
          ee2(2, 3), te2(256, n.static_ltree), ie2(), 1 + O2 + 10 - q2 < 9 && (ee2(2, 3), te2(256, n.static_ltree), ie2()), O2 = 7;
        else if (se2(0, 0, false), 3 == o2)
          for (_3 = 0; _3 < v2; _3++)
            p2[_3] = 0;
        if (e2.flush_pending(), 0 === e2.avail_out)
          return l2 = -1, 0;
      }
    }
    return 4 != o2 ? 0 : 1;
  };
}
function l() {
  var e2 = this;
  e2.next_in_index = 0, e2.next_out_index = 0, e2.avail_in = 0, e2.total_in = 0, e2.avail_out = 0, e2.total_out = 0;
}
function f(e2) {
  var t2 = new l(), n2 = 512, i2 = new Uint8Array(n2), r2 = e2 ? e2.level : -1;
  void 0 === r2 && (r2 = -1), t2.deflateInit(r2), t2.next_out = i2, this.append = function(e3, r3) {
    var a2, o2 = [], s2 = 0, l2 = 0, f2 = 0;
    if (e3.length) {
      t2.next_in_index = 0, t2.next_in = e3, t2.avail_in = e3.length;
      do {
        if (t2.next_out_index = 0, t2.avail_out = n2, 0 != t2.deflate(0))
          throw new Error("deflating: " + t2.msg);
        t2.next_out_index && o2.push(t2.next_out_index == n2 ? new Uint8Array(i2) : new Uint8Array(i2.subarray(0, t2.next_out_index))), f2 += t2.next_out_index, r3 && t2.next_in_index > 0 && t2.next_in_index != s2 && (r3(t2.next_in_index), s2 = t2.next_in_index);
      } while (t2.avail_in > 0 || 0 === t2.avail_out);
      return a2 = new Uint8Array(f2), o2.forEach(function(e4) {
        a2.set(e4, l2), l2 += e4.length;
      }), a2;
    }
  }, this.flush = function() {
    var e3, r3, a2 = [], o2 = 0, s2 = 0;
    do {
      if (t2.next_out_index = 0, t2.avail_out = n2, 1 != (e3 = t2.deflate(4)) && 0 != e3)
        throw new Error("deflating: " + t2.msg);
      n2 - t2.avail_out > 0 && a2.push(new Uint8Array(i2.subarray(0, t2.next_out_index))), s2 += t2.next_out_index;
    } while (t2.avail_in > 0 || 0 === t2.avail_out);
    return t2.deflateEnd(), r3 = new Uint8Array(s2), a2.forEach(function(e4) {
      r3.set(e4, o2), o2 += e4.length;
    }), r3;
  };
}
l.prototype = { deflateInit: function(e2, t2) {
  var n2 = this;
  return n2.dstate = new s(), t2 || (t2 = 15), n2.dstate.deflateInit(n2, e2, t2);
}, deflate: function(e2) {
  var t2 = this;
  return t2.dstate ? t2.dstate.deflate(t2, e2) : -2;
}, deflateEnd: function() {
  var e2 = this;
  if (!e2.dstate)
    return -2;
  var t2 = e2.dstate.deflateEnd();
  return e2.dstate = null, t2;
}, deflateParams: function(e2, t2) {
  var n2 = this;
  return n2.dstate ? n2.dstate.deflateParams(n2, e2, t2) : -2;
}, deflateSetDictionary: function(e2, t2) {
  var n2 = this;
  return n2.dstate ? n2.dstate.deflateSetDictionary(n2, e2, t2) : -2;
}, read_buf: function(e2, t2, n2) {
  var i2 = this, r2 = i2.avail_in;
  return r2 > n2 && (r2 = n2), 0 === r2 ? 0 : (i2.avail_in -= r2, e2.set(i2.next_in.subarray(i2.next_in_index, i2.next_in_index + r2), t2), i2.next_in_index += r2, i2.total_in += r2, r2);
}, flush_pending: function() {
  var e2 = this, t2 = e2.dstate.pending;
  t2 > e2.avail_out && (t2 = e2.avail_out), 0 !== t2 && (e2.next_out.set(e2.dstate.pending_buf.subarray(e2.dstate.pending_out, e2.dstate.pending_out + t2), e2.next_out_index), e2.next_out_index += t2, e2.dstate.pending_out += t2, e2.total_out += t2, e2.avail_out -= t2, e2.dstate.pending -= t2, 0 === e2.dstate.pending && (e2.dstate.pending_out = 0));
} }, self._zipjs_Deflater = f;
var u = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535];
var d = [96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255];
var c = [80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577];
var _ = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
var h = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112];
var p = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
var w = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
function v() {
  var e2, t2, n2, i2, r2, a2;
  function o2(e3, t3, o3, s3, l2, f2, u2, d2, c2, _2, h2) {
    var p2, w2, v2, b2, x2, m2, g2, y2, k2, U2, z2, E2, D2, A2, S2;
    U2 = 0, x2 = o3;
    do {
      n2[e3[t3 + U2]]++, U2++, x2--;
    } while (0 !== x2);
    if (n2[0] == o3)
      return u2[0] = -1, d2[0] = 0, 0;
    for (y2 = d2[0], m2 = 1; m2 <= 15 && 0 === n2[m2]; m2++)
      ;
    for (g2 = m2, y2 < m2 && (y2 = m2), x2 = 15; 0 !== x2 && 0 === n2[x2]; x2--)
      ;
    for (v2 = x2, y2 > x2 && (y2 = x2), d2[0] = y2, A2 = 1 << m2; m2 < x2; m2++, A2 <<= 1)
      if ((A2 -= n2[m2]) < 0)
        return -3;
    if ((A2 -= n2[x2]) < 0)
      return -3;
    for (n2[x2] += A2, a2[1] = m2 = 0, U2 = 1, D2 = 2; 0 != --x2; )
      a2[D2] = m2 += n2[U2], D2++, U2++;
    x2 = 0, U2 = 0;
    do {
      0 !== (m2 = e3[t3 + U2]) && (h2[a2[m2]++] = x2), U2++;
    } while (++x2 < o3);
    for (o3 = a2[v2], a2[0] = x2 = 0, U2 = 0, b2 = -1, E2 = -y2, r2[0] = 0, z2 = 0, S2 = 0; g2 <= v2; g2++)
      for (p2 = n2[g2]; 0 != p2--; ) {
        for (; g2 > E2 + y2; ) {
          if (b2++, S2 = (S2 = v2 - (E2 += y2)) > y2 ? y2 : S2, (w2 = 1 << (m2 = g2 - E2)) > p2 + 1 && (w2 -= p2 + 1, D2 = g2, m2 < S2))
            for (; ++m2 < S2 && !((w2 <<= 1) <= n2[++D2]); )
              w2 -= n2[D2];
          if (_2[0] + (S2 = 1 << m2) > 1440)
            return -3;
          r2[b2] = z2 = _2[0], _2[0] += S2, 0 !== b2 ? (a2[b2] = x2, i2[0] = m2, i2[1] = y2, i2[2] = z2 - r2[b2 - 1] - (m2 = x2 >>> E2 - y2), c2.set(i2, 3 * (r2[b2 - 1] + m2))) : u2[0] = z2;
        }
        for (i2[1] = g2 - E2, U2 >= o3 ? i2[0] = 192 : h2[U2] < s3 ? (i2[0] = h2[U2] < 256 ? 0 : 96, i2[2] = h2[U2++]) : (i2[0] = f2[h2[U2] - s3] + 16 + 64, i2[2] = l2[h2[U2++] - s3]), w2 = 1 << g2 - E2, m2 = x2 >>> E2; m2 < S2; m2 += w2)
          c2.set(i2, 3 * (z2 + m2));
        for (m2 = 1 << g2 - 1; 0 != (x2 & m2); m2 >>>= 1)
          x2 ^= m2;
        for (x2 ^= m2, k2 = (1 << E2) - 1; (x2 & k2) != a2[b2]; )
          b2--, k2 = (1 << (E2 -= y2)) - 1;
      }
    return 0 !== A2 && 1 != v2 ? -5 : 0;
  }
  function s2(o3) {
    var s3;
    for (e2 || (e2 = [], t2 = [], n2 = new Int32Array(16), i2 = [], r2 = new Int32Array(15), a2 = new Int32Array(16)), t2.length < o3 && (t2 = []), s3 = 0; s3 < o3; s3++)
      t2[s3] = 0;
    for (s3 = 0; s3 < 16; s3++)
      n2[s3] = 0;
    for (s3 = 0; s3 < 3; s3++)
      i2[s3] = 0;
    r2.set(n2.subarray(0, 15), 0), a2.set(n2.subarray(0, 16), 0);
  }
  this.inflate_trees_bits = function(n3, i3, r3, a3, l2) {
    var f2;
    return s2(19), e2[0] = 0, -3 == (f2 = o2(n3, 0, 19, 19, null, null, r3, i3, a3, e2, t2)) ? l2.msg = "oversubscribed dynamic bit lengths tree" : -5 != f2 && 0 !== i3[0] || (l2.msg = "incomplete dynamic bit lengths tree", f2 = -3), f2;
  }, this.inflate_trees_dynamic = function(n3, i3, r3, a3, l2, f2, u2, d2, c2) {
    var v2;
    return s2(288), e2[0] = 0, 0 != (v2 = o2(r3, 0, n3, 257, _, h, f2, a3, d2, e2, t2)) || 0 === a3[0] ? (-3 == v2 ? c2.msg = "oversubscribed literal/length tree" : -4 != v2 && (c2.msg = "incomplete literal/length tree", v2 = -3), v2) : (s2(288), 0 != (v2 = o2(r3, n3, i3, 0, p, w, u2, l2, d2, e2, t2)) || 0 === l2[0] && n3 > 257 ? (-3 == v2 ? c2.msg = "oversubscribed distance tree" : -5 == v2 ? (c2.msg = "incomplete distance tree", v2 = -3) : -4 != v2 && (c2.msg = "empty distance tree with lengths", v2 = -3), v2) : 0);
  };
}
function b() {
  var e2, t2, n2, i2, r2 = this, a2 = 0, o2 = 0, s2 = 0, l2 = 0, f2 = 0, d2 = 0, c2 = 0, _2 = 0, h2 = 0, p2 = 0;
  function w2(e3, t3, n3, i3, r3, a3, o3, s3) {
    var l3, f3, d3, c3, _3, h3, p3, w3, v2, b2, x2, m2, g2, y2, k2, U2;
    p3 = s3.next_in_index, w3 = s3.avail_in, _3 = o3.bitb, h3 = o3.bitk, b2 = (v2 = o3.write) < o3.read ? o3.read - v2 - 1 : o3.end - v2, x2 = u[e3], m2 = u[t3];
    do {
      for (; h3 < 20; )
        w3--, _3 |= (255 & s3.read_byte(p3++)) << h3, h3 += 8;
      if (0 !== (c3 = (f3 = n3)[U2 = 3 * ((d3 = i3) + (l3 = _3 & x2))]))
        for (; ; ) {
          if (_3 >>= f3[U2 + 1], h3 -= f3[U2 + 1], 0 != (16 & c3)) {
            for (g2 = f3[U2 + 2] + (_3 & u[c3 &= 15]), _3 >>= c3, h3 -= c3; h3 < 15; )
              w3--, _3 |= (255 & s3.read_byte(p3++)) << h3, h3 += 8;
            for (c3 = (f3 = r3)[U2 = 3 * ((d3 = a3) + (l3 = _3 & m2))]; ; ) {
              if (_3 >>= f3[U2 + 1], h3 -= f3[U2 + 1], 0 != (16 & c3)) {
                for (c3 &= 15; h3 < c3; )
                  w3--, _3 |= (255 & s3.read_byte(p3++)) << h3, h3 += 8;
                if (y2 = f3[U2 + 2] + (_3 & u[c3]), _3 >>= c3, h3 -= c3, b2 -= g2, v2 >= y2)
                  v2 - (k2 = v2 - y2) > 0 && 2 > v2 - k2 ? (o3.window[v2++] = o3.window[k2++], o3.window[v2++] = o3.window[k2++], g2 -= 2) : (o3.window.set(o3.window.subarray(k2, k2 + 2), v2), v2 += 2, k2 += 2, g2 -= 2);
                else {
                  k2 = v2 - y2;
                  do {
                    k2 += o3.end;
                  } while (k2 < 0);
                  if (g2 > (c3 = o3.end - k2)) {
                    if (g2 -= c3, v2 - k2 > 0 && c3 > v2 - k2)
                      do {
                        o3.window[v2++] = o3.window[k2++];
                      } while (0 != --c3);
                    else
                      o3.window.set(o3.window.subarray(k2, k2 + c3), v2), v2 += c3, k2 += c3, c3 = 0;
                    k2 = 0;
                  }
                }
                if (v2 - k2 > 0 && g2 > v2 - k2)
                  do {
                    o3.window[v2++] = o3.window[k2++];
                  } while (0 != --g2);
                else
                  o3.window.set(o3.window.subarray(k2, k2 + g2), v2), v2 += g2, k2 += g2, g2 = 0;
                break;
              }
              if (0 != (64 & c3))
                return s3.msg = "invalid distance code", w3 += g2 = h3 >> 3 < (g2 = s3.avail_in - w3) ? h3 >> 3 : g2, p3 -= g2, h3 -= g2 << 3, o3.bitb = _3, o3.bitk = h3, s3.avail_in = w3, s3.total_in += p3 - s3.next_in_index, s3.next_in_index = p3, o3.write = v2, -3;
              l3 += f3[U2 + 2], c3 = f3[U2 = 3 * (d3 + (l3 += _3 & u[c3]))];
            }
            break;
          }
          if (0 != (64 & c3))
            return 0 != (32 & c3) ? (w3 += g2 = h3 >> 3 < (g2 = s3.avail_in - w3) ? h3 >> 3 : g2, p3 -= g2, h3 -= g2 << 3, o3.bitb = _3, o3.bitk = h3, s3.avail_in = w3, s3.total_in += p3 - s3.next_in_index, s3.next_in_index = p3, o3.write = v2, 1) : (s3.msg = "invalid literal/length code", w3 += g2 = h3 >> 3 < (g2 = s3.avail_in - w3) ? h3 >> 3 : g2, p3 -= g2, h3 -= g2 << 3, o3.bitb = _3, o3.bitk = h3, s3.avail_in = w3, s3.total_in += p3 - s3.next_in_index, s3.next_in_index = p3, o3.write = v2, -3);
          if (l3 += f3[U2 + 2], 0 === (c3 = f3[U2 = 3 * (d3 + (l3 += _3 & u[c3]))])) {
            _3 >>= f3[U2 + 1], h3 -= f3[U2 + 1], o3.window[v2++] = f3[U2 + 2], b2--;
            break;
          }
        }
      else
        _3 >>= f3[U2 + 1], h3 -= f3[U2 + 1], o3.window[v2++] = f3[U2 + 2], b2--;
    } while (b2 >= 258 && w3 >= 10);
    return w3 += g2 = h3 >> 3 < (g2 = s3.avail_in - w3) ? h3 >> 3 : g2, p3 -= g2, h3 -= g2 << 3, o3.bitb = _3, o3.bitk = h3, s3.avail_in = w3, s3.total_in += p3 - s3.next_in_index, s3.next_in_index = p3, o3.write = v2, 0;
  }
  r2.init = function(r3, a3, o3, s3, l3, f3) {
    e2 = 0, c2 = r3, _2 = a3, n2 = o3, h2 = s3, i2 = l3, p2 = f3, t2 = null;
  }, r2.proc = function(r3, v2, b2) {
    var x2, m2, g2, y2, k2, U2, z2, E2 = 0, D2 = 0, A2 = 0;
    for (A2 = v2.next_in_index, y2 = v2.avail_in, E2 = r3.bitb, D2 = r3.bitk, U2 = (k2 = r3.write) < r3.read ? r3.read - k2 - 1 : r3.end - k2; ; )
      switch (e2) {
        case 0:
          if (U2 >= 258 && y2 >= 10 && (r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, b2 = w2(c2, _2, n2, h2, i2, p2, r3, v2), A2 = v2.next_in_index, y2 = v2.avail_in, E2 = r3.bitb, D2 = r3.bitk, U2 = (k2 = r3.write) < r3.read ? r3.read - k2 - 1 : r3.end - k2, 0 != b2)) {
            e2 = 1 == b2 ? 7 : 9;
            break;
          }
          s2 = c2, t2 = n2, o2 = h2, e2 = 1;
        case 1:
          for (x2 = s2; D2 < x2; ) {
            if (0 === y2)
              return r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
            b2 = 0, y2--, E2 |= (255 & v2.read_byte(A2++)) << D2, D2 += 8;
          }
          if (E2 >>>= t2[1 + (m2 = 3 * (o2 + (E2 & u[x2])))], D2 -= t2[m2 + 1], 0 === (g2 = t2[m2])) {
            l2 = t2[m2 + 2], e2 = 6;
            break;
          }
          if (0 != (16 & g2)) {
            f2 = 15 & g2, a2 = t2[m2 + 2], e2 = 2;
            break;
          }
          if (0 == (64 & g2)) {
            s2 = g2, o2 = m2 / 3 + t2[m2 + 2];
            break;
          }
          if (0 != (32 & g2)) {
            e2 = 7;
            break;
          }
          return e2 = 9, v2.msg = "invalid literal/length code", b2 = -3, r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
        case 2:
          for (x2 = f2; D2 < x2; ) {
            if (0 === y2)
              return r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
            b2 = 0, y2--, E2 |= (255 & v2.read_byte(A2++)) << D2, D2 += 8;
          }
          a2 += E2 & u[x2], E2 >>= x2, D2 -= x2, s2 = _2, t2 = i2, o2 = p2, e2 = 3;
        case 3:
          for (x2 = s2; D2 < x2; ) {
            if (0 === y2)
              return r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
            b2 = 0, y2--, E2 |= (255 & v2.read_byte(A2++)) << D2, D2 += 8;
          }
          if (E2 >>= t2[1 + (m2 = 3 * (o2 + (E2 & u[x2])))], D2 -= t2[m2 + 1], 0 != (16 & (g2 = t2[m2]))) {
            f2 = 15 & g2, d2 = t2[m2 + 2], e2 = 4;
            break;
          }
          if (0 == (64 & g2)) {
            s2 = g2, o2 = m2 / 3 + t2[m2 + 2];
            break;
          }
          return e2 = 9, v2.msg = "invalid distance code", b2 = -3, r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
        case 4:
          for (x2 = f2; D2 < x2; ) {
            if (0 === y2)
              return r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
            b2 = 0, y2--, E2 |= (255 & v2.read_byte(A2++)) << D2, D2 += 8;
          }
          d2 += E2 & u[x2], E2 >>= x2, D2 -= x2, e2 = 5;
        case 5:
          for (z2 = k2 - d2; z2 < 0; )
            z2 += r3.end;
          for (; 0 !== a2; ) {
            if (0 === U2 && (k2 == r3.end && 0 !== r3.read && (U2 = (k2 = 0) < r3.read ? r3.read - k2 - 1 : r3.end - k2), 0 === U2 && (r3.write = k2, b2 = r3.inflate_flush(v2, b2), U2 = (k2 = r3.write) < r3.read ? r3.read - k2 - 1 : r3.end - k2, k2 == r3.end && 0 !== r3.read && (U2 = (k2 = 0) < r3.read ? r3.read - k2 - 1 : r3.end - k2), 0 === U2)))
              return r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
            r3.window[k2++] = r3.window[z2++], U2--, z2 == r3.end && (z2 = 0), a2--;
          }
          e2 = 0;
          break;
        case 6:
          if (0 === U2 && (k2 == r3.end && 0 !== r3.read && (U2 = (k2 = 0) < r3.read ? r3.read - k2 - 1 : r3.end - k2), 0 === U2 && (r3.write = k2, b2 = r3.inflate_flush(v2, b2), U2 = (k2 = r3.write) < r3.read ? r3.read - k2 - 1 : r3.end - k2, k2 == r3.end && 0 !== r3.read && (U2 = (k2 = 0) < r3.read ? r3.read - k2 - 1 : r3.end - k2), 0 === U2)))
            return r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
          b2 = 0, r3.window[k2++] = l2, U2--, e2 = 0;
          break;
        case 7:
          if (D2 > 7 && (D2 -= 8, y2++, A2--), r3.write = k2, b2 = r3.inflate_flush(v2, b2), U2 = (k2 = r3.write) < r3.read ? r3.read - k2 - 1 : r3.end - k2, r3.read != r3.write)
            return r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
          e2 = 8;
        case 8:
          return b2 = 1, r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
        case 9:
          return b2 = -3, r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
        default:
          return b2 = -2, r3.bitb = E2, r3.bitk = D2, v2.avail_in = y2, v2.total_in += A2 - v2.next_in_index, v2.next_in_index = A2, r3.write = k2, r3.inflate_flush(v2, b2);
      }
  }, r2.free = function() {
  };
}
v.inflate_trees_fixed = function(e2, t2, n2, i2) {
  return e2[0] = 9, t2[0] = 5, n2[0] = d, i2[0] = c, 0;
};
var x = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
function m(e2, t2) {
  var n2, i2 = this, r2 = 0, a2 = 0, o2 = 0, s2 = 0, l2 = [0], f2 = [0], d2 = new b(), c2 = 0, _2 = new Int32Array(4320), h2 = new v();
  i2.bitk = 0, i2.bitb = 0, i2.window = new Uint8Array(t2), i2.end = t2, i2.read = 0, i2.write = 0, i2.reset = function(e3, t3) {
    t3 && (t3[0] = 0), 6 == r2 && d2.free(e3), r2 = 0, i2.bitk = 0, i2.bitb = 0, i2.read = i2.write = 0;
  }, i2.reset(e2, null), i2.inflate_flush = function(e3, t3) {
    var n3, r3, a3;
    return r3 = e3.next_out_index, (n3 = ((a3 = i2.read) <= i2.write ? i2.write : i2.end) - a3) > e3.avail_out && (n3 = e3.avail_out), 0 !== n3 && -5 == t3 && (t3 = 0), e3.avail_out -= n3, e3.total_out += n3, e3.next_out.set(i2.window.subarray(a3, a3 + n3), r3), r3 += n3, (a3 += n3) == i2.end && (a3 = 0, i2.write == i2.end && (i2.write = 0), (n3 = i2.write - a3) > e3.avail_out && (n3 = e3.avail_out), 0 !== n3 && -5 == t3 && (t3 = 0), e3.avail_out -= n3, e3.total_out += n3, e3.next_out.set(i2.window.subarray(a3, a3 + n3), r3), r3 += n3, a3 += n3), e3.next_out_index = r3, i2.read = a3, t3;
  }, i2.proc = function(e3, t3) {
    var p2, w2, b2, m2, g2, y2, k2, U2;
    for (m2 = e3.next_in_index, g2 = e3.avail_in, w2 = i2.bitb, b2 = i2.bitk, k2 = (y2 = i2.write) < i2.read ? i2.read - y2 - 1 : i2.end - y2; ; )
      switch (r2) {
        case 0:
          for (; b2 < 3; ) {
            if (0 === g2)
              return i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
            t3 = 0, g2--, w2 |= (255 & e3.read_byte(m2++)) << b2, b2 += 8;
          }
          switch (c2 = 1 & (p2 = 7 & w2), p2 >>> 1) {
            case 0:
              w2 >>>= 3, w2 >>>= p2 = 7 & (b2 -= 3), b2 -= p2, r2 = 1;
              break;
            case 1:
              var z2 = [], E2 = [], D2 = [[]], A2 = [[]];
              v.inflate_trees_fixed(z2, E2, D2, A2), d2.init(z2[0], E2[0], D2[0], 0, A2[0], 0), w2 >>>= 3, b2 -= 3, r2 = 6;
              break;
            case 2:
              w2 >>>= 3, b2 -= 3, r2 = 3;
              break;
            case 3:
              return w2 >>>= 3, b2 -= 3, r2 = 9, e3.msg = "invalid block type", t3 = -3, i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
          }
          break;
        case 1:
          for (; b2 < 32; ) {
            if (0 === g2)
              return i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
            t3 = 0, g2--, w2 |= (255 & e3.read_byte(m2++)) << b2, b2 += 8;
          }
          if ((~w2 >>> 16 & 65535) != (65535 & w2))
            return r2 = 9, e3.msg = "invalid stored block lengths", t3 = -3, i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
          a2 = 65535 & w2, w2 = b2 = 0, r2 = 0 !== a2 ? 2 : 0 !== c2 ? 7 : 0;
          break;
        case 2:
          if (0 === g2)
            return i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
          if (0 === k2 && (y2 == i2.end && 0 !== i2.read && (k2 = (y2 = 0) < i2.read ? i2.read - y2 - 1 : i2.end - y2), 0 === k2 && (i2.write = y2, t3 = i2.inflate_flush(e3, t3), k2 = (y2 = i2.write) < i2.read ? i2.read - y2 - 1 : i2.end - y2, y2 == i2.end && 0 !== i2.read && (k2 = (y2 = 0) < i2.read ? i2.read - y2 - 1 : i2.end - y2), 0 === k2)))
            return i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
          if (t3 = 0, (p2 = a2) > g2 && (p2 = g2), p2 > k2 && (p2 = k2), i2.window.set(e3.read_buf(m2, p2), y2), m2 += p2, g2 -= p2, y2 += p2, k2 -= p2, 0 != (a2 -= p2))
            break;
          r2 = 0 !== c2 ? 7 : 0;
          break;
        case 3:
          for (; b2 < 14; ) {
            if (0 === g2)
              return i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
            t3 = 0, g2--, w2 |= (255 & e3.read_byte(m2++)) << b2, b2 += 8;
          }
          if (o2 = p2 = 16383 & w2, (31 & p2) > 29 || (p2 >> 5 & 31) > 29)
            return r2 = 9, e3.msg = "too many length or distance symbols", t3 = -3, i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
          if (p2 = 258 + (31 & p2) + (p2 >> 5 & 31), !n2 || n2.length < p2)
            n2 = [];
          else
            for (U2 = 0; U2 < p2; U2++)
              n2[U2] = 0;
          w2 >>>= 14, b2 -= 14, s2 = 0, r2 = 4;
        case 4:
          for (; s2 < 4 + (o2 >>> 10); ) {
            for (; b2 < 3; ) {
              if (0 === g2)
                return i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
              t3 = 0, g2--, w2 |= (255 & e3.read_byte(m2++)) << b2, b2 += 8;
            }
            n2[x[s2++]] = 7 & w2, w2 >>>= 3, b2 -= 3;
          }
          for (; s2 < 19; )
            n2[x[s2++]] = 0;
          if (l2[0] = 7, 0 != (p2 = h2.inflate_trees_bits(n2, l2, f2, _2, e3)))
            return -3 == (t3 = p2) && (n2 = null, r2 = 9), i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
          s2 = 0, r2 = 5;
        case 5:
          for (; !(s2 >= 258 + (31 & (p2 = o2)) + (p2 >> 5 & 31)); ) {
            var S2, R2;
            for (p2 = l2[0]; b2 < p2; ) {
              if (0 === g2)
                return i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
              t3 = 0, g2--, w2 |= (255 & e3.read_byte(m2++)) << b2, b2 += 8;
            }
            if ((R2 = _2[3 * (f2[0] + (w2 & u[p2 = _2[3 * (f2[0] + (w2 & u[p2])) + 1]])) + 2]) < 16)
              w2 >>>= p2, b2 -= p2, n2[s2++] = R2;
            else {
              for (U2 = 18 == R2 ? 7 : R2 - 14, S2 = 18 == R2 ? 11 : 3; b2 < p2 + U2; ) {
                if (0 === g2)
                  return i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
                t3 = 0, g2--, w2 |= (255 & e3.read_byte(m2++)) << b2, b2 += 8;
              }
              if (b2 -= p2, S2 += (w2 >>>= p2) & u[U2], w2 >>>= U2, b2 -= U2, (U2 = s2) + S2 > 258 + (31 & (p2 = o2)) + (p2 >> 5 & 31) || 16 == R2 && U2 < 1)
                return n2 = null, r2 = 9, e3.msg = "invalid bit length repeat", t3 = -3, i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
              R2 = 16 == R2 ? n2[U2 - 1] : 0;
              do {
                n2[U2++] = R2;
              } while (0 != --S2);
              s2 = U2;
            }
          }
          f2[0] = -1;
          var F2 = [], T2 = [], W2 = [], M2 = [];
          if (F2[0] = 9, T2[0] = 6, 0 != (p2 = h2.inflate_trees_dynamic(257 + (31 & (p2 = o2)), 1 + (p2 >> 5 & 31), n2, F2, T2, W2, M2, _2, e3)))
            return -3 == p2 && (n2 = null, r2 = 9), t3 = p2, i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
          d2.init(F2[0], T2[0], _2, W2[0], _2, M2[0]), r2 = 6;
        case 6:
          if (i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, 1 != (t3 = d2.proc(i2, e3, t3)))
            return i2.inflate_flush(e3, t3);
          if (t3 = 0, d2.free(e3), m2 = e3.next_in_index, g2 = e3.avail_in, w2 = i2.bitb, b2 = i2.bitk, k2 = (y2 = i2.write) < i2.read ? i2.read - y2 - 1 : i2.end - y2, 0 === c2) {
            r2 = 0;
            break;
          }
          r2 = 7;
        case 7:
          if (i2.write = y2, t3 = i2.inflate_flush(e3, t3), k2 = (y2 = i2.write) < i2.read ? i2.read - y2 - 1 : i2.end - y2, i2.read != i2.write)
            return i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
          r2 = 8;
        case 8:
          return t3 = 1, i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
        case 9:
          return t3 = -3, i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
        default:
          return t3 = -2, i2.bitb = w2, i2.bitk = b2, e3.avail_in = g2, e3.total_in += m2 - e3.next_in_index, e3.next_in_index = m2, i2.write = y2, i2.inflate_flush(e3, t3);
      }
  }, i2.free = function(e3) {
    i2.reset(e3, null), i2.window = null, _2 = null;
  }, i2.set_dictionary = function(e3, t3, n3) {
    i2.window.set(e3.subarray(t3, t3 + n3), 0), i2.read = i2.write = n3;
  }, i2.sync_point = function() {
    return 1 == r2 ? 1 : 0;
  };
}
var g = [0, 0, 255, 255];
function y() {
  var e2 = this;
  function t2(e3) {
    return e3 && e3.istate ? (e3.total_in = e3.total_out = 0, e3.msg = null, e3.istate.mode = 7, e3.istate.blocks.reset(e3, null), 0) : -2;
  }
  e2.mode = 0, e2.method = 0, e2.was = [0], e2.need = 0, e2.marker = 0, e2.wbits = 0, e2.inflateEnd = function(t3) {
    return e2.blocks && e2.blocks.free(t3), e2.blocks = null, 0;
  }, e2.inflateInit = function(n2, i2) {
    return n2.msg = null, e2.blocks = null, i2 < 8 || i2 > 15 ? (e2.inflateEnd(n2), -2) : (e2.wbits = i2, n2.istate.blocks = new m(n2, 1 << i2), t2(n2), 0);
  }, e2.inflate = function(e3, t3) {
    var n2, i2;
    if (!e3 || !e3.istate || !e3.next_in)
      return -2;
    for (t3 = 4 == t3 ? -5 : 0, n2 = -5; ; )
      switch (e3.istate.mode) {
        case 0:
          if (0 === e3.avail_in)
            return n2;
          if (n2 = t3, e3.avail_in--, e3.total_in++, 8 != (15 & (e3.istate.method = e3.read_byte(e3.next_in_index++)))) {
            e3.istate.mode = 13, e3.msg = "unknown compression method", e3.istate.marker = 5;
            break;
          }
          if (8 + (e3.istate.method >> 4) > e3.istate.wbits) {
            e3.istate.mode = 13, e3.msg = "invalid window size", e3.istate.marker = 5;
            break;
          }
          e3.istate.mode = 1;
        case 1:
          if (0 === e3.avail_in)
            return n2;
          if (n2 = t3, e3.avail_in--, e3.total_in++, i2 = 255 & e3.read_byte(e3.next_in_index++), ((e3.istate.method << 8) + i2) % 31 != 0) {
            e3.istate.mode = 13, e3.msg = "incorrect header check", e3.istate.marker = 5;
            break;
          }
          if (0 == (32 & i2)) {
            e3.istate.mode = 7;
            break;
          }
          e3.istate.mode = 2;
        case 2:
          if (0 === e3.avail_in)
            return n2;
          n2 = t3, e3.avail_in--, e3.total_in++, e3.istate.need = (255 & e3.read_byte(e3.next_in_index++)) << 24 & 4278190080, e3.istate.mode = 3;
        case 3:
          if (0 === e3.avail_in)
            return n2;
          n2 = t3, e3.avail_in--, e3.total_in++, e3.istate.need += (255 & e3.read_byte(e3.next_in_index++)) << 16 & 16711680, e3.istate.mode = 4;
        case 4:
          if (0 === e3.avail_in)
            return n2;
          n2 = t3, e3.avail_in--, e3.total_in++, e3.istate.need += (255 & e3.read_byte(e3.next_in_index++)) << 8 & 65280, e3.istate.mode = 5;
        case 5:
          return 0 === e3.avail_in ? n2 : (n2 = t3, e3.avail_in--, e3.total_in++, e3.istate.need += 255 & e3.read_byte(e3.next_in_index++), e3.istate.mode = 6, 2);
        case 6:
          return e3.istate.mode = 13, e3.msg = "need dictionary", e3.istate.marker = 0, -2;
        case 7:
          if (-3 == (n2 = e3.istate.blocks.proc(e3, n2))) {
            e3.istate.mode = 13, e3.istate.marker = 0;
            break;
          }
          if (0 == n2 && (n2 = t3), 1 != n2)
            return n2;
          n2 = t3, e3.istate.blocks.reset(e3, e3.istate.was), e3.istate.mode = 12;
        case 12:
          return 1;
        case 13:
          return -3;
        default:
          return -2;
      }
  }, e2.inflateSetDictionary = function(e3, t3, n2) {
    var i2 = 0, r2 = n2;
    return e3 && e3.istate && 6 == e3.istate.mode ? (r2 >= 1 << e3.istate.wbits && (i2 = n2 - (r2 = (1 << e3.istate.wbits) - 1)), e3.istate.blocks.set_dictionary(t3, i2, r2), e3.istate.mode = 7, 0) : -2;
  }, e2.inflateSync = function(e3) {
    var n2, i2, r2, a2, o2;
    if (!e3 || !e3.istate)
      return -2;
    if (13 != e3.istate.mode && (e3.istate.mode = 13, e3.istate.marker = 0), 0 === (n2 = e3.avail_in))
      return -5;
    for (i2 = e3.next_in_index, r2 = e3.istate.marker; 0 !== n2 && r2 < 4; )
      e3.read_byte(i2) == g[r2] ? r2++ : r2 = 0 !== e3.read_byte(i2) ? 0 : 4 - r2, i2++, n2--;
    return e3.total_in += i2 - e3.next_in_index, e3.next_in_index = i2, e3.avail_in = n2, e3.istate.marker = r2, 4 != r2 ? -3 : (a2 = e3.total_in, o2 = e3.total_out, t2(e3), e3.total_in = a2, e3.total_out = o2, e3.istate.mode = 7, 0);
  }, e2.inflateSyncPoint = function(e3) {
    return e3 && e3.istate && e3.istate.blocks ? e3.istate.blocks.sync_point() : -2;
  };
}
function k() {
}
function U() {
  var e2 = new k(), t2 = new Uint8Array(512), n2 = false;
  e2.inflateInit(), e2.next_out = t2, this.append = function(i2, r2) {
    var a2, o2, s2 = [], l2 = 0, f2 = 0, u2 = 0;
    if (0 !== i2.length) {
      e2.next_in_index = 0, e2.next_in = i2, e2.avail_in = i2.length;
      do {
        if (e2.next_out_index = 0, e2.avail_out = 512, 0 !== e2.avail_in || n2 || (e2.next_in_index = 0, n2 = true), a2 = e2.inflate(0), n2 && -5 === a2) {
          if (0 !== e2.avail_in)
            throw new Error("inflating: bad input");
        } else if (0 !== a2 && 1 !== a2)
          throw new Error("inflating: " + e2.msg);
        if ((n2 || 1 === a2) && e2.avail_in === i2.length)
          throw new Error("inflating: bad input");
        e2.next_out_index && s2.push(512 === e2.next_out_index ? new Uint8Array(t2) : new Uint8Array(t2.subarray(0, e2.next_out_index))), u2 += e2.next_out_index, r2 && e2.next_in_index > 0 && e2.next_in_index != l2 && (r2(e2.next_in_index), l2 = e2.next_in_index);
      } while (e2.avail_in > 0 || 0 === e2.avail_out);
      return o2 = new Uint8Array(u2), s2.forEach(function(e3) {
        o2.set(e3, f2), f2 += e3.length;
      }), o2;
    }
  }, this.flush = function() {
    e2.inflateEnd();
  };
}
k.prototype = { inflateInit: function(e2) {
  var t2 = this;
  return t2.istate = new y(), e2 || (e2 = 15), t2.istate.inflateInit(t2, e2);
}, inflate: function(e2) {
  var t2 = this;
  return t2.istate ? t2.istate.inflate(t2, e2) : -2;
}, inflateEnd: function() {
  var e2 = this;
  if (!e2.istate)
    return -2;
  var t2 = e2.istate.inflateEnd(e2);
  return e2.istate = null, t2;
}, inflateSync: function() {
  var e2 = this;
  return e2.istate ? e2.istate.inflateSync(e2) : -2;
}, inflateSetDictionary: function(e2, t2) {
  var n2 = this;
  return n2.istate ? n2.istate.inflateSetDictionary(n2, e2, t2) : -2;
}, read_byte: function(e2) {
  return this.next_in.subarray(e2, e2 + 1)[0];
}, read_buf: function(e2, t2) {
  return this.next_in.subarray(e2, e2 + t2);
} }, self._zipjs_Inflater = U;
var z;
var E = "File format is not recognized.";
var D = "Error while reading zip file.";
try {
  z = 0 === new Blob([new DataView(new ArrayBuffer(0))]).size;
} catch (e2) {
}
function A() {
  this.crc = -1;
}
function S() {
}
function R(e2, t2) {
  var n2, i2;
  return n2 = new ArrayBuffer(e2), i2 = new Uint8Array(n2), t2 && i2.set(t2, 0), { buffer: n2, array: i2, view: new DataView(n2) };
}
function F() {
}
function T(e2) {
  var t2, n2 = this;
  n2.size = 0, n2.init = function(i2, r2) {
    var a2 = new Blob([e2], { type: "text/plain" });
    (t2 = new M(a2)).init(function() {
      n2.size = t2.size, i2();
    }, r2);
  }, n2.readUint8Array = function(e3, n3, i2, r2) {
    t2.readUint8Array(e3, n3, i2, r2);
  };
}
function W(e2) {
  var t2, n2 = this;
  n2.size = 0, n2.init = function(i2) {
    for (var r2 = e2.length; "=" == e2.charAt(r2 - 1); )
      r2--;
    t2 = e2.indexOf(",") + 1, n2.size = Math.floor(0.75 * (r2 - t2)), i2();
  }, n2.readUint8Array = function(n3, i2, r2) {
    var a2, o2 = R(i2), s2 = 4 * Math.floor(n3 / 3), l2 = 4 * Math.ceil((n3 + i2) / 3), f2 = self.atob(e2.substring(s2 + t2, l2 + t2)), u2 = n3 - 3 * Math.floor(s2 / 4);
    for (a2 = u2; a2 < u2 + i2; a2++)
      o2.array[a2 - u2] = f2.charCodeAt(a2);
    r2(o2.array);
  };
}
function M(e2) {
  var t2 = this;
  t2.size = 0, t2.init = function(n2) {
    t2.size = e2.size, n2();
  }, t2.readUint8Array = function(t3, n2, i2, r2) {
    var a2 = new FileReader();
    a2.onload = function(e3) {
      i2(new Uint8Array(e3.target.result));
    }, a2.onerror = r2;
    try {
      a2.readAsArrayBuffer(function(e3, t4, n3) {
        if (t4 < 0 || n3 < 0 || t4 + n3 > e3.size)
          throw new RangeError("offset:" + t4 + ", length:" + n3 + ", size:" + e3.size);
        return e3.slice ? e3.slice(t4, t4 + n3) : e3.webkitSlice ? e3.webkitSlice(t4, t4 + n3) : e3.mozSlice ? e3.mozSlice(t4, t4 + n3) : e3.msSlice ? e3.msSlice(t4, t4 + n3) : void 0;
      }(e2, t3, n2));
    } catch (e3) {
      r2(e3);
    }
  };
}
function B() {
}
function I(e2) {
  var t2, n2 = this;
  n2.init = function(e3) {
    t2 = new Blob([], { type: "text/plain" }), e3();
  }, n2.writeUint8Array = function(e3, n3) {
    t2 = new Blob([t2, z ? e3 : e3.buffer], { type: "text/plain" }), n3();
  }, n2.getData = function(n3, i2) {
    var r2 = new FileReader();
    r2.onload = function(e3) {
      n3(e3.target.result);
    }, r2.onerror = i2, r2.readAsText(t2, e2);
  };
}
function C(e2) {
  var t2 = this, n2 = "", i2 = "";
  t2.init = function(t3) {
    n2 += "data:" + (e2 || "") + ";base64,", t3();
  }, t2.writeUint8Array = function(e3, t3) {
    var r2, a2 = i2.length, o2 = i2;
    for (i2 = "", r2 = 0; r2 < 3 * Math.floor((a2 + e3.length) / 3) - a2; r2++)
      o2 += String.fromCharCode(e3[r2]);
    for (; r2 < e3.length; r2++)
      i2 += String.fromCharCode(e3[r2]);
    o2.length > 2 ? n2 += self.btoa(o2) : i2 = o2, t3();
  }, t2.getData = function(e3) {
    e3(n2 + self.btoa(i2));
  };
}
function L(e2) {
  var t2, n2 = this;
  n2.init = function(n3) {
    t2 = new Blob([], { type: e2 }), n3();
  }, n2.writeUint8Array = function(n3, i2) {
    t2 = new Blob([t2, z ? n3 : n3.buffer], { type: e2 }), i2();
  }, n2.getData = function(e3) {
    e3(t2);
  };
}
function P(e2, t2, n2, i2, r2, a2, o2, s2, l2, f2) {
  var u2, d2, c2, _2 = 0, h2 = t2.sn;
  function p2() {
    e2.removeEventListener("message", w2, false), s2(d2, c2);
  }
  function w2(t3) {
    var n3 = t3.data, r3 = n3.data, s3 = n3.error;
    if (s3)
      return s3.toString = function() {
        return "Error: " + this.message;
      }, void l2(s3);
    if (n3.sn === h2)
      switch ("number" == typeof n3.codecTime && (e2.codecTime += n3.codecTime), "number" == typeof n3.crcTime && (e2.crcTime += n3.crcTime), n3.type) {
        case "append":
          r3 ? (d2 += r3.length, i2.writeUint8Array(r3, function() {
            v2();
          }, f2)) : v2();
          break;
        case "flush":
          c2 = n3.crc, r3 ? (d2 += r3.length, i2.writeUint8Array(r3, function() {
            p2();
          }, f2)) : p2();
          break;
        case "progress":
          o2 && o2(u2 + n3.loaded, a2);
          break;
        case "importScripts":
        case "newTask":
        case "echo":
          break;
        default:
          console.warn("zip.js:launchWorkerProcess: unknown message: ", n3);
      }
  }
  function v2() {
    (u2 = 524288 * _2) <= a2 ? n2.readUint8Array(r2 + u2, Math.min(524288, a2 - u2), function(n3) {
      o2 && o2(u2, a2);
      var i3 = 0 === u2 ? t2 : { sn: h2 };
      i3.type = "append", i3.data = n3;
      try {
        e2.postMessage(i3, [n3.buffer]);
      } catch (t3) {
        e2.postMessage(i3);
      }
      _2++;
    }, l2) : e2.postMessage({ sn: h2, type: "flush" });
  }
  d2 = 0, e2.addEventListener("message", w2, false), v2();
}
function Z(e2, t2, n2, i2, r2, a2, o2, s2, l2, f2) {
  var u2, d2 = 0, c2 = 0, _2 = "input" === a2, h2 = "output" === a2, p2 = new A();
  !function a3() {
    var w2;
    if ((u2 = 524288 * d2) < r2)
      t2.readUint8Array(i2 + u2, Math.min(524288, r2 - u2), function(t3) {
        var i3;
        try {
          i3 = e2.append(t3, function(e3) {
            o2 && o2(u2 + e3, r2);
          });
        } catch (e3) {
          return void l2(e3);
        }
        i3 ? (c2 += i3.length, n2.writeUint8Array(i3, function() {
          d2++, setTimeout(a3, 1);
        }, f2), h2 && p2.append(i3)) : (d2++, setTimeout(a3, 1)), _2 && p2.append(t3), o2 && o2(u2, r2);
      }, l2);
    else {
      try {
        w2 = e2.flush();
      } catch (e3) {
        return void l2(e3);
      }
      w2 ? (h2 && p2.append(w2), c2 += w2.length, n2.writeUint8Array(w2, function() {
        s2(c2, p2.get());
      }, f2)) : s2(c2, p2.get());
    }
  }();
}
function N(e2, t2, n2, i2, r2, a2, o2, s2, l2, f2, u2) {
  var d2 = "input";
  K.useWebWorkers && o2 ? P(e2, { sn: t2, codecClass: "_zipjs_NOOP", crcType: d2 }, n2, i2, r2, a2, l2, s2, f2, u2) : Z(new S(), n2, i2, r2, a2, d2, l2, s2, f2, u2);
}
function j(e2) {
  var t2, n2, i2 = "", r2 = ["Ç", "ü", "é", "â", "ä", "à", "å", "ç", "ê", "ë", "è", "ï", "î", "ì", "Ä", "Å", "É", "æ", "Æ", "ô", "ö", "ò", "û", "ù", "ÿ", "Ö", "Ü", "ø", "£", "Ø", "×", "ƒ", "á", "í", "ó", "ú", "ñ", "Ñ", "ª", "º", "¿", "®", "¬", "½", "¼", "¡", "«", "»", "_", "_", "_", "¦", "¦", "Á", "Â", "À", "©", "¦", "¦", "+", "+", "¢", "¥", "+", "+", "-", "-", "+", "-", "+", "ã", "Ã", "+", "+", "-", "-", "¦", "-", "+", "¤", "ð", "Ð", "Ê", "Ë", "È", "i", "Í", "Î", "Ï", "+", "+", "_", "_", "¦", "Ì", "_", "Ó", "ß", "Ô", "Ò", "õ", "Õ", "µ", "þ", "Þ", "Ú", "Û", "Ù", "ý", "Ý", "¯", "´", "­", "±", "_", "¾", "¶", "§", "÷", "¸", "°", "¨", "·", "¹", "³", "²", "_", " "];
  for (t2 = 0; t2 < e2.length; t2++)
    i2 += (n2 = 255 & e2.charCodeAt(t2)) > 127 ? r2[n2 - 128] : String.fromCharCode(n2);
  return i2;
}
function O(e2) {
  return decodeURIComponent(escape(e2));
}
function V(e2) {
  var t2, n2 = "";
  for (t2 = 0; t2 < e2.length; t2++)
    n2 += String.fromCharCode(e2[t2]);
  return n2;
}
function q(e2, t2, n2, i2, r2) {
  e2.version = t2.view.getUint16(n2, true), e2.bitFlag = t2.view.getUint16(n2 + 2, true), e2.compressionMethod = t2.view.getUint16(n2 + 4, true), e2.lastModDateRaw = t2.view.getUint32(n2 + 6, true), e2.lastModDate = function(e3) {
    var t3 = (4294901760 & e3) >> 16, n3 = 65535 & e3;
    try {
      return new Date(1980 + ((65024 & t3) >> 9), ((480 & t3) >> 5) - 1, 31 & t3, (63488 & n3) >> 11, (2016 & n3) >> 5, 2 * (31 & n3), 0);
    } catch (e4) {
    }
  }(e2.lastModDateRaw), 1 != (1 & e2.bitFlag) ? ((i2 || 8 != (8 & e2.bitFlag)) && (e2.crc32 = t2.view.getUint32(n2 + 10, true), e2.compressedSize = t2.view.getUint32(n2 + 14, true), e2.uncompressedSize = t2.view.getUint32(n2 + 18, true)), 4294967295 !== e2.compressedSize && 4294967295 !== e2.uncompressedSize ? (e2.filenameLength = t2.view.getUint16(n2 + 22, true), e2.extraFieldLength = t2.view.getUint16(n2 + 24, true)) : r2("File is using Zip64 (4gb+ file size).")) : r2("File contains encrypted entry.");
}
function $(e2) {
  return unescape(encodeURIComponent(e2));
}
function G(e2) {
  var t2, n2 = [];
  for (t2 = 0; t2 < e2.length; t2++)
    n2.push(e2.charCodeAt(t2));
  return n2;
}
A.prototype.append = function(e2) {
  for (var t2 = 0 | this.crc, n2 = this.table, i2 = 0, r2 = 0 | e2.length; i2 < r2; i2++)
    t2 = t2 >>> 8 ^ n2[255 & (t2 ^ e2[i2])];
  this.crc = t2;
}, A.prototype.get = function() {
  return ~this.crc;
}, A.prototype.table = function() {
  var e2, t2, n2, i2 = [];
  for (e2 = 0; e2 < 256; e2++) {
    for (n2 = e2, t2 = 0; t2 < 8; t2++)
      1 & n2 ? n2 = n2 >>> 1 ^ 3988292384 : n2 >>>= 1;
    i2[e2] = n2;
  }
  return i2;
}(), S.prototype.append = function(e2, t2) {
  return e2;
}, S.prototype.flush = function() {
}, (T.prototype = new F()).constructor = T, (W.prototype = new F()).constructor = W, (M.prototype = new F()).constructor = M, B.prototype.getData = function(e2) {
  e2(this.data);
}, (I.prototype = new B()).constructor = I, (C.prototype = new B()).constructor = C, (L.prototype = new B()).constructor = L;
var H = { deflater: ["z-worker.js", "deflate.js"], inflater: ["z-worker.js", "inflate.js"] };
function Y(e2, t2, n2) {
  if (null === K.workerScripts || null === K.workerScriptsPath) {
    var i2, r2, a2;
    if (K.workerScripts) {
      if (i2 = K.workerScripts[e2], !Array.isArray(i2))
        return void n2(new Error("zip.workerScripts." + e2 + " is not an array!"));
      r2 = i2, a2 = document.createElement("a"), i2 = r2.map(function(e3) {
        return a2.href = e3, a2.href;
      });
    } else
      (i2 = H[e2].slice(0))[0] = (K.workerScriptsPath || "") + i2[0];
    var o2 = new Worker(i2[0]);
    o2.codecTime = o2.crcTime = 0, o2.postMessage({ type: "importScripts", scripts: i2.slice(1) }), o2.addEventListener("message", function e3(i3) {
      var r3 = i3.data;
      if (r3.error)
        return o2.terminate(), void n2(r3.error);
      "importScripts" === r3.type && (o2.removeEventListener("message", e3), o2.removeEventListener("error", s2), t2(o2));
    }), o2.addEventListener("error", s2);
  } else
    n2(new Error("Either zip.workerScripts or zip.workerScriptsPath may be set, not both."));
  function s2(e3) {
    o2.terminate(), n2(e3);
  }
}
function J(e2) {
  console.error(e2);
}
var K = { Reader: F, Writer: B, BlobReader: M, Data64URIReader: W, TextReader: T, BlobWriter: L, Data64URIWriter: C, TextWriter: I, createReader: function(e2, t2, n2) {
  e2.init(function() {
    !function(e3, t3, n3) {
      var i2 = 0;
      function r2() {
      }
      r2.prototype.getData = function(t4, r3, a3, o2) {
        var s2 = this;
        function l2(e4, i3) {
          o2 && !function(e5) {
            var t5 = R(4);
            return t5.view.setUint32(0, e5), s2.crc32 == t5.view.getUint32(0);
          }(i3) ? n3("CRC failed.") : t4.getData(function(e5) {
            r3(e5);
          });
        }
        function f2(e4) {
          n3(e4 || "Error while reading file data.");
        }
        function u2(e4) {
          n3(e4 || "Error while writing file data.");
        }
        e3.readUint8Array(s2.offset, 30, function(r4) {
          var d2, c2 = R(r4.length, r4);
          1347093252 == c2.view.getUint32(0) ? (q(s2, c2, 4, false, n3), d2 = s2.offset + 30 + s2.filenameLength + s2.extraFieldLength, t4.init(function() {
            0 === s2.compressionMethod ? N(s2._worker, i2++, e3, t4, d2, s2.compressedSize, o2, l2, a3, f2, u2) : function(e4, t5, n4, i3, r5, a4, o3, s3, l3, f3, u3) {
              var d3 = o3 ? "output" : "none";
              K.useWebWorkers ? P(e4, { sn: t5, codecClass: "_zipjs_Inflater", crcType: d3 }, n4, i3, r5, a4, l3, s3, f3, u3) : Z(new U(), n4, i3, r5, a4, d3, l3, s3, f3, u3);
            }(s2._worker, i2++, e3, t4, d2, s2.compressedSize, o2, l2, a3, f2, u2);
          }, u2)) : n3(E);
        }, f2);
      };
      var a2 = { getEntries: function(t4) {
        var i3 = this._worker;
        !function(t5) {
          function i4(i5, r3) {
            e3.readUint8Array(e3.size - i5, i5, function(e4) {
              for (var n4 = e4.length - 22; n4 >= 0; n4--)
                if (80 === e4[n4] && 75 === e4[n4 + 1] && 5 === e4[n4 + 2] && 6 === e4[n4 + 3])
                  return void t5(new DataView(e4.buffer, n4, 22));
              r3();
            }, function() {
              n3(D);
            });
          }
          e3.size < 22 ? n3(E) : i4(22, function() {
            i4(Math.min(65558, e3.size), function() {
              n3(E);
            });
          });
        }(function(a3) {
          var o2, s2;
          o2 = a3.getUint32(16, true), s2 = a3.getUint16(8, true), o2 < 0 || o2 >= e3.size ? n3(E) : e3.readUint8Array(o2, e3.size - o2, function(e4) {
            var a4, o3, l2, f2, u2 = 0, d2 = [], c2 = R(e4.length, e4);
            for (a4 = 0; a4 < s2; a4++) {
              if ((o3 = new r2())._worker = i3, 1347092738 != c2.view.getUint32(u2))
                return void n3(E);
              q(o3, c2, u2 + 6, true, n3), o3.commentLength = c2.view.getUint16(u2 + 32, true), o3.directory = 16 == (16 & c2.view.getUint8(u2 + 38)), o3.offset = c2.view.getUint32(u2 + 42, true), l2 = V(c2.array.subarray(u2 + 46, u2 + 46 + o3.filenameLength)), o3.filename = 2048 == (2048 & o3.bitFlag) ? O(l2) : j(l2), o3.directory || "/" != o3.filename.charAt(o3.filename.length - 1) || (o3.directory = true), f2 = V(c2.array.subarray(u2 + 46 + o3.filenameLength + o3.extraFieldLength, u2 + 46 + o3.filenameLength + o3.extraFieldLength + o3.commentLength)), o3.comment = 2048 == (2048 & o3.bitFlag) ? O(f2) : j(f2), d2.push(o3), u2 += 46 + o3.filenameLength + o3.extraFieldLength + o3.commentLength;
            }
            t4(d2);
          }, function() {
            n3(D);
          });
        });
      }, close: function(e4) {
        this._worker && (this._worker.terminate(), this._worker = null), e4 && e4();
      }, _worker: null };
      K.useWebWorkers ? Y("inflater", function(e4) {
        a2._worker = e4, t3(a2);
      }, function(e4) {
        n3(e4);
      }) : t3(a2);
    }(e2, t2, n2);
  }, n2 = n2 || J);
}, createWriter: function(e2, t2, n2, i2) {
  i2 = !!i2, e2.init(function() {
    !function(e3, t3, n3, i3) {
      var r2 = {}, a2 = [], o2 = 0, s2 = 0;
      function l2(e4) {
        n3(e4 || "Error while writing zip file.");
      }
      function u2(e4) {
        n3(e4 || "Error while reading file data.");
      }
      var d2 = { add: function(t4, d3, c2, _2, h2) {
        var p2, w2, v2, b2 = this._worker;
        function x2(t5, n4) {
          var i4 = R(16);
          o2 += t5 || 0, i4.view.setUint32(0, 1347094280), void 0 !== n4 && (p2.view.setUint32(10, n4, true), i4.view.setUint32(4, n4, true)), d3 && (i4.view.setUint32(8, t5, true), p2.view.setUint32(14, t5, true), i4.view.setUint32(12, d3.size, true), p2.view.setUint32(18, d3.size, true)), e3.writeUint8Array(i4.array, function() {
            o2 += 16, c2();
          }, l2);
        }
        function m2() {
          var c3;
          h2 = h2 || {}, t4 = t4.trim(), h2.directory && "/" != t4.charAt(t4.length - 1) && (t4 += "/"), r2.hasOwnProperty(t4) ? n3("File already exists.") : (w2 = G($(t4)), a2.push(t4), v2 = h2.lastModDate || /* @__PURE__ */ new Date(), p2 = R(26), r2[t4] = { headerArray: p2.array, directory: h2.directory, filename: w2, offset: o2, comment: G($(h2.comment || "")) }, p2.view.setUint32(0, 335546376), h2.version && p2.view.setUint8(0, h2.version), i3 || 0 === h2.level || h2.directory || p2.view.setUint16(4, 2048), p2.view.setUint16(6, (v2.getHours() << 6 | v2.getMinutes()) << 5 | v2.getSeconds() / 2, true), p2.view.setUint16(8, (v2.getFullYear() - 1980 << 4 | v2.getMonth() + 1) << 5 | v2.getDate(), true), p2.view.setUint16(22, w2.length, true), (c3 = R(30 + w2.length)).view.setUint32(0, 1347093252), c3.array.set(p2.array, 4), c3.array.set(w2, 30), o2 += c3.array.length, e3.writeUint8Array(c3.array, function() {
            d3 ? i3 || 0 === h2.level ? N(b2, s2++, d3, e3, 0, d3.size, true, x2, _2, u2, l2) : function(e4, t5, n4, i4, r3, a3, o3, s3, l3) {
              var u3 = "input";
              K.useWebWorkers ? P(e4, { sn: t5, options: { level: r3 }, codecClass: "_zipjs_Deflater", crcType: u3 }, n4, i4, 0, n4.size, o3, a3, s3, l3) : Z(new f(), n4, i4, 0, n4.size, u3, o3, a3, s3, l3);
            }(b2, s2++, d3, e3, h2.level, x2, _2, u2, l2) : x2();
          }, l2));
        }
        d3 ? d3.init(m2, u2) : m2();
      }, close: function(t4) {
        this._worker && (this._worker.terminate(), this._worker = null);
        var n4, i4, s3, f2 = 0, u3 = 0;
        for (i4 = 0; i4 < a2.length; i4++)
          f2 += 46 + (s3 = r2[a2[i4]]).filename.length + s3.comment.length;
        for (n4 = R(f2 + 22), i4 = 0; i4 < a2.length; i4++)
          s3 = r2[a2[i4]], n4.view.setUint32(u3, 1347092738), n4.view.setUint16(u3 + 4, 5120), n4.array.set(s3.headerArray, u3 + 6), n4.view.setUint16(u3 + 32, s3.comment.length, true), s3.directory && n4.view.setUint8(u3 + 38, 16), n4.view.setUint32(u3 + 42, s3.offset, true), n4.array.set(s3.filename, u3 + 46), n4.array.set(s3.comment, u3 + 46 + s3.filename.length), u3 += 46 + s3.filename.length + s3.comment.length;
        n4.view.setUint32(u3, 1347093766), n4.view.setUint16(u3 + 8, a2.length, true), n4.view.setUint16(u3 + 10, a2.length, true), n4.view.setUint32(u3 + 12, f2, true), n4.view.setUint32(u3 + 16, o2, true), e3.writeUint8Array(n4.array, function() {
          e3.getData(t4);
        }, l2);
      }, _worker: null };
      K.useWebWorkers ? Y("deflater", function(e4) {
        d2._worker = e4, t3(d2);
      }, function(e4) {
        n3(e4);
      }) : t3(d2);
    }(e2, t2, n2, i2);
  }, n2 = n2 || J);
}, useWebWorkers: true, workerScriptsPath: null, workerScripts: null };
var Q;
var X;
var ee = K.TextWriter;
var te = K.BlobWriter;
var ne = K.Data64URIWriter;
var ie = K.TextReader;
var re = K.BlobReader;
var ae = K.Data64URIReader;
var oe = K.createReader;
var se = K.createWriter;
function le(e2) {
  var t2, n2 = this;
  n2.size = 0, n2.init = function(t3) {
    n2.size = e2.uncompressedSize, t3();
  }, n2.readUint8Array = function(i2, r2, a2, o2) {
    !function(i3) {
      n2.data ? i3() : e2.getData(new te(), function(e3) {
        n2.data = e3, t2 = new re(e3), i3();
      }, null, n2.checkCrc32);
    }(function() {
      t2.readUint8Array(i2, r2, a2, o2);
    });
  };
}
function fe(e2) {
  var t2 = 0;
  return function e3(n2) {
    t2 += n2.uncompressedSize || 0, n2.children.forEach(e3);
  }(e2), t2;
}
function ue(e2, t2, n2) {
  var i2 = 0;
  function r2() {
    ++i2 < e2.children.length ? a2(e2.children[i2]) : t2();
  }
  function a2(e3) {
    e3.directory ? ue(e3, r2, n2) : (e3.reader = new e3.Reader(e3.data, n2), e3.reader.init(function() {
      e3.uncompressedSize = e3.reader.size, r2();
    }));
  }
  e2.children.length ? a2(e2.children[i2]) : t2();
}
function de(e2) {
  var t2 = e2.parent.children;
  t2.forEach(function(n2, i2) {
    n2.id == e2.id && t2.splice(i2, 1);
  });
}
function ce(e2) {
  e2.entries = [], e2.root = new we(e2);
}
function _e(e2, t2, n2, i2) {
  if (e2.directory)
    return i2 ? new we(e2.fs, t2, n2, e2) : new pe(e2.fs, t2, n2, e2);
  throw "Parent entry is not a directory.";
}
function he() {
}
function pe(e2, t2, n2, i2) {
  var r2 = this;
  he.prototype.init.call(r2, e2, t2, n2, i2), r2.Reader = n2.Reader, r2.Writer = n2.Writer, r2.data = n2.data, n2.getData && (r2.getData = n2.getData);
}
function we(e2, t2, n2, i2) {
  he.prototype.init.call(this, e2, t2, n2, i2), this.directory = true;
}
function ve() {
  ce(this);
}
(le.prototype = new (0, K.Reader)()).constructor = le, le.prototype.checkCrc32 = false, (he.prototype = { init: function(e2, t2, n2, i2) {
  var r2 = this;
  if (e2.root && i2 && i2.getChildByName(t2))
    throw "Entry filename already exists.";
  n2 || (n2 = {}), r2.fs = e2, r2.name = t2, r2.id = e2.entries.length, r2.parent = i2, r2.children = [], r2.zipVersion = n2.zipVersion || 20, r2.uncompressedSize = 0, e2.entries.push(r2), i2 && r2.parent.children.push(r2);
}, getFileEntry: function(e2, t2, n2, i2, r2) {
  var a2 = this;
  ue(a2, function() {
    !function(e3, t3, n3, i3, r3, a3, o2) {
      var s2 = 0;
      t3.directory ? function e4(t4, n4, i4, r4, a4, l2) {
        var f2 = 0;
        !function u2() {
          var d2 = n4.children[f2];
          d2 ? function(n5) {
            function i5(t5) {
              s2 += n5.uncompressedSize || 0, e4(t5, n5, function() {
                f2++, u2();
              }, r4, a4, l2);
            }
            n5.directory ? t4.getDirectory(n5.name, { create: true }, i5, a4) : t4.getFile(n5.name, { create: true }, function(e5) {
              n5.getData(new K.FileWriter(e5, K.getMimeType(n5.name)), i5, function(e6) {
                r4 && r4(s2 + e6, l2);
              }, o2);
            }, a4);
          }(d2) : i4();
        }();
      }(e3, t3, n3, i3, r3, a3) : t3.getData(new K.FileWriter(e3, K.getMimeType(t3.name)), n3, i3, o2);
    }(e2, a2, t2, n2, i2, fe(a2), r2);
  }, i2);
}, moveTo: function(e2) {
  var t2 = this;
  if (!e2.directory)
    throw "Target entry is not a directory.";
  if (e2.isDescendantOf(t2))
    throw "Entry is a ancestor of target entry.";
  if (t2 != e2) {
    if (e2.getChildByName(t2.name))
      throw "Entry filename already exists.";
    de(t2), t2.parent = e2, e2.children.push(t2);
  }
}, getFullname: function() {
  for (var e2 = this.name, t2 = this.parent; t2; )
    e2 = (t2.name ? t2.name + "/" : "") + e2, t2 = t2.parent;
  return e2;
}, isDescendantOf: function(e2) {
  for (var t2 = this.parent; t2 && t2.id != e2.id; )
    t2 = t2.parent;
  return !!t2;
} }).constructor = he, pe.prototype = Q = new he(), Q.constructor = pe, Q.getData = function(e2, t2, n2, i2) {
  var r2 = this;
  !e2 || e2.constructor == r2.Writer && r2.data ? t2(r2.data) : (r2.reader || (r2.reader = new r2.Reader(r2.data, i2)), r2.reader.init(function() {
    e2.init(function() {
      !function(e3, t3, n3, i3, r3) {
        var a2 = 0;
        !function o2() {
          var s2 = 524288 * a2;
          i3 && i3(s2, e3.size), s2 < e3.size ? e3.readUint8Array(s2, Math.min(524288, e3.size - s2), function(e4) {
            t3.writeUint8Array(new Uint8Array(e4), function() {
              a2++, o2();
            });
          }, r3) : t3.getData(n3);
        }();
      }(r2.reader, e2, t2, n2, i2);
    }, i2);
  }));
}, Q.getText = function(e2, t2, n2, i2) {
  this.getData(new ee(i2), e2, t2, n2);
}, Q.getBlob = function(e2, t2, n2, i2) {
  this.getData(new te(e2), t2, n2, i2);
}, Q.getData64URI = function(e2, t2, n2, i2) {
  this.getData(new ne(e2), t2, n2, i2);
}, we.prototype = X = new he(), X.constructor = we, X.addDirectory = function(e2) {
  return _e(this, e2, null, true);
}, X.addText = function(e2, t2) {
  return _e(this, e2, { data: t2, Reader: ie, Writer: ee });
}, X.addBlob = function(e2, t2) {
  return _e(this, e2, { data: t2, Reader: re, Writer: te });
}, X.addData64URI = function(e2, t2) {
  return _e(this, e2, { data: t2, Reader: ae, Writer: ne });
}, X.addFileEntry = function(e2, t2, n2) {
  !function(e3, t3, n3, i2) {
    t3.isDirectory ? function e4(t4, n4, r2) {
      !function(e5, t5) {
        e5.isDirectory && e5.createReader().readEntries(t5), e5.isFile && t5([]);
      }(n4, function(n5) {
        var a2 = 0;
        !function o2() {
          var s2 = n5[a2];
          s2 ? function(n6) {
            function r3(t5) {
              e4(t5, n6, function() {
                a2++, o2();
              });
            }
            n6.isDirectory && r3(t4.addDirectory(n6.name)), n6.isFile && n6.file(function(e5) {
              var i3 = t4.addBlob(n6.name, e5);
              i3.uncompressedSize = e5.size, r3(i3);
            }, i2);
          }(s2) : r2();
        }();
      });
    }(e3, t3, n3) : t3.file(function(i3) {
      e3.addBlob(t3.name, i3), n3();
    }, i2);
  }(this, e2, t2, n2);
}, X.addData = function(e2, t2) {
  return _e(this, e2, t2);
}, X.importBlob = function(e2, t2, n2) {
  this.importZip(new re(e2), t2, n2);
}, X.importText = function(e2, t2, n2) {
  this.importZip(new ie(e2), t2, n2);
}, X.importData64URI = function(e2, t2, n2) {
  this.importZip(new ae(e2), t2, n2);
}, X.exportBlob = function(e2, t2, n2) {
  this.exportZip(new te("application/zip"), e2, t2, n2);
}, X.exportText = function(e2, t2, n2) {
  this.exportZip(new ee(), e2, t2, n2);
}, X.exportFileEntry = function(e2, t2, n2, i2) {
  this.exportZip(new K.FileWriter(e2, "application/zip"), t2, n2, i2);
}, X.exportData64URI = function(e2, t2, n2) {
  this.exportZip(new ne("application/zip"), e2, t2, n2);
}, X.importZip = function(e2, t2, n2) {
  var i2 = this;
  oe(e2, function(e3) {
    e3.getEntries(function(e4) {
      e4.forEach(function(e5) {
        var t3 = i2, n3 = e5.filename.split("/"), r2 = n3.pop();
        n3.forEach(function(e6) {
          t3 = t3.getChildByName(e6) || new we(i2.fs, e6, null, t3);
        }), e5.directory || _e(t3, r2, { data: e5, Reader: le });
      }), t2();
    });
  }, n2);
}, X.exportZip = function(e2, t2, n2, i2) {
  var r2 = this;
  ue(r2, function() {
    se(e2, function(e3) {
      !function(e4, t3, n3, i3, r3) {
        var a2 = 0;
        !function e5(t4, n4, i4, r4, o2) {
          var s2 = 0;
          !function l2() {
            var f2 = n4.children[s2];
            f2 ? t4.add(f2.getFullname(), f2.reader, function() {
              a2 += f2.uncompressedSize || 0, e5(t4, f2, function() {
                s2++, l2();
              }, r4, o2);
            }, function(e6) {
              r4 && r4(a2 + e6, o2);
            }, { directory: f2.directory, version: f2.zipVersion }) : i4();
          }();
        }(e4, t3, n3, i3, r3);
      }(e3, r2, function() {
        e3.close(t2);
      }, n2, fe(r2));
    }, i2);
  }, i2);
}, X.getChildByName = function(e2) {
  var t2, n2;
  for (t2 = 0; t2 < this.children.length; t2++)
    if ((n2 = this.children[t2]).name == e2)
      return n2;
}, ve.prototype = { remove: function(e2) {
  de(e2), this.entries[e2.id] = null;
}, find: function(e2) {
  var t2, n2 = e2.split("/"), i2 = this.root;
  for (t2 = 0; i2 && t2 < n2.length; t2++)
    i2 = i2.getChildByName(n2[t2]);
  return i2;
}, getById: function(e2) {
  return this.entries[e2];
}, importBlob: function(e2, t2, n2) {
  ce(this), this.root.importBlob(e2, t2, n2);
}, importText: function(e2, t2, n2) {
  ce(this), this.root.importText(e2, t2, n2);
}, importData64URI: function(e2, t2, n2) {
  ce(this), this.root.importData64URI(e2, t2, n2);
}, exportBlob: function(e2, t2, n2) {
  this.root.exportBlob(e2, t2, n2);
}, exportText: function(e2, t2, n2) {
  this.root.exportText(e2, t2, n2);
}, exportFileEntry: function(e2, t2, n2, i2) {
  this.root.exportFileEntry(e2, t2, n2, i2);
}, exportData64URI: function(e2, t2, n2) {
  this.root.exportData64URI(e2, t2, n2);
} }, K.getMimeType = function() {
  return "application/octet-stream";
};
var be = { FS: ve, ZipDirectoryEntry: we, ZipFileEntry: pe };
K.useWebWorkers = false;
var xe = function() {
  function e2(e3, t3) {
    this.el = e3, this.inputEl = t3, this.listeners = { drop: [], dropstart: [], droperror: [] }, this._onDragover = this._onDragover.bind(this), this._onDrop = this._onDrop.bind(this), this._onSelect = this._onSelect.bind(this), e3.addEventListener("dragover", this._onDragover, false), e3.addEventListener("drop", this._onDrop, false), t3.addEventListener("change", this._onSelect);
  }
  var t2 = e2.prototype;
  return t2.on = function(e3, t3) {
    return this.listeners[e3].push(t3), this;
  }, t2._emit = function(e3, t3) {
    return this.listeners[e3].forEach(function(e4) {
      return e4(t3);
    }), this;
  }, t2.destroy = function() {
    var e3 = this.el, t3 = this.inputEl;
    e3.removeEventListener("dragover", this._onDragover, false), e3.removeEventListener("drop", this._onDrop, false), t3.removeEventListener("change", this._onSelect), delete this.el, delete this.inputEl, delete this.listeners;
  }, t2._onDrop = function(e3) {
    e3.stopPropagation(), e3.preventDefault(), this._emit("dropstart");
    var t3 = Array.from(e3.dataTransfer.files || []), n2 = Array.from(e3.dataTransfer.items || []);
    if (0 !== t3.length || 0 !== n2.length)
      if (n2.length > 0) {
        var i2 = n2.map(function(e4) {
          return e4.webkitGetAsEntry();
        }).filter(function(e4) {
          return null !== e4;
        });
        i2.length > 0 && (i2[0].name.match(/\.zip$/) ? this._loadZip(n2[0].getAsFile()) : this._loadNextEntry(/* @__PURE__ */ new Map(), i2));
      } else
        1 === t3.length && t3[0].name.match(/\.zip$/) && this._loadZip(t3[0]), this._emit("drop", { files: new Map(t3.map(function(e4) {
          return [e4.name, e4];
        })) });
    else
      this._fail("Required drag-and-drop APIs are not supported in this browser.");
  }, t2._onDragover = function(e3) {
    e3.stopPropagation(), e3.preventDefault(), e3.dataTransfer.dropEffect = "copy";
  }, t2._onSelect = function(e3) {
    this._emit("dropstart");
    var t3 = [].slice.call(this.inputEl.files);
    if (1 === t3.length && this._isZip(t3[0]))
      this._loadZip(t3[0]);
    else {
      var n2 = /* @__PURE__ */ new Map();
      t3.forEach(function(e4) {
        return n2.set(e4.webkitRelativePath || e4.name, e4);
      }), this._emit("drop", { files: n2 });
    }
  }, t2._loadNextEntry = function(e3, t3) {
    var n2 = this, i2 = t3.pop();
    if (i2)
      if (i2.isFile)
        i2.file(function(r3) {
          e3.set(i2.fullPath, r3), n2._loadNextEntry(e3, t3);
        }, function() {
          return console.error("Could not load file: %s", i2.fullPath);
        });
      else if (i2.isDirectory) {
        var r2 = i2.createReader();
        r2.readEntries(function i3(a2) {
          a2.length ? (t3 = t3.concat(a2), r2.readEntries(i3)) : n2._loadNextEntry(e3, t3);
        });
      } else
        console.warn("Unknown asset type: " + i2.fullPath), this._loadNextEntry(e3, t3);
    else
      this._emit("drop", { files: e3 });
  }, t2._loadZip = function(e3) {
    var t3 = this, n2 = [], i2 = /* @__PURE__ */ new Map(), r2 = new be.FS(), a2 = function e4(t4) {
      t4.directory ? t4.children.forEach(e4) : "." !== t4.name[0] && n2.push(new Promise(function(e5) {
        t4.getData(new K.BlobWriter(), function(n3) {
          n3.name = t4.name, i2.set(t4.getFullname(), n3), e5();
        });
      }));
    };
    r2.importBlob(e3, function() {
      a2(r2.root), Promise.all(n2).then(function() {
        t3._emit("drop", { files: i2, archive: e3 });
      });
    });
  }, t2._isZip = function(e3) {
    return "application/zip" === e3.type || e3.name.match(/\.zip$/);
  }, t2._fail = function(e3) {
    this._emit("droperror", { message: e3 });
  }, e2;
}();
export {
  xe as SimpleDropzone
};
//# sourceMappingURL=simple-dropzone.js.map
